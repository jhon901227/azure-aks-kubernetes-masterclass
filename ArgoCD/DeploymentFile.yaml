apiVersion: v1
kind: Namespace
metadata:
  name: microservice-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: microservice-app
data:
  APP_ENV: "production"
  LOG_LEVEL: "info"
  DATABASE_URL: "postgresql://db-user@db-service:5432/mydatabase"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: microservice-app
type: Opaque
data:
  DB_PASSWORD: <base64-encoded-password>  # Replace with the base64 encoded password
  JWT_SECRET: <base64-encoded-secret>     # Replace with the base64 encoded secret key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-backend
  namespace: microservice-app
  labels:
    app: app-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app-backend
  template:
    metadata:
      labels:
        app: app-backend
    spec:
      containers:
      - name: app-backend
        image: myorg/app-backend:latest  # Replace with your backend image
        ports:
        - containerPort: 8080
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DATABASE_URL
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: JWT_SECRET
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: app-config-volume
          mountPath: /etc/config
      volumes:
      - name: app-config-volume
        configMap:
          name: app-config
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: microservice-app
spec:
  selector:
    app: app-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-frontend
  namespace: microservice-app
  labels:
    app: app-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-frontend
  template:
    metadata:
      labels:
        app: app-frontend
    spec:
      containers:
      - name: app-frontend
        image: myorg/app-frontend:latest  # Replace with your frontend image
        ports:
        - containerPort: 80
        env:
        - name: BACKEND_URL
          value: "http://backend-service.microservice-app.svc.cluster.local"
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readiness
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: microservice-app
spec:
  selector:
    app: app-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservice-ingress
  namespace: microservice-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: "myapp.example.com"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
